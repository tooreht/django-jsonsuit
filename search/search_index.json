{
    "docs": [
        {
            "location": "/",
            "text": "django-jsonsuit\n\n\nDjango goodies to dress JSON data in a suit.\n\n\nFeatures\n\n\n\n\nEditable and readonly widget\n\n\nChange JSON syntax highlighter themes\n\n\nSet custom widget media (JS & CSS) files\n\n\nUse custom HTML templates\n\n\n\n\nQuickstart\n\n\nInstall django-jsonsuit:\n\n\npip install django-jsonsuit\n\n\n\nAdd it to your \nINSTALLED_APPS\n:\n\n\nINSTALLED_APPS = (\n    ...\n    'jsonsuit.apps.JSONSuitConfig',\n    ...\n)\n\n\n\n\nUsage\n\n\nWidgets\n\n\ndjango-jsonsuit currently provides two widgets to dress your JSON data:\n\n\n\n\nJSONSuit\n: Widget that displays JSON data with indentation and syntax highlighting as default, but allows to toggle between the standard django \nTextarea\n for editing.\n\n\nReadonlyJSONSuit\n: Widget that simply displays JSON data with indentation and syntax highlighting. It is useful for JSON fields that contain readonly data.\n\n\n\n\nNote\n: Because a widget in django is only responsible for displaying fields, it has no direct access to its field properties. Thus there is no easy way to check if the field is readonly. The readonly behaviour is even handled differently among django forms, model forms and admin. This is why the \nReadonlyJSONSuit\n was introduced.\n\n\nJSONSuit\n\n\nIn a form or model admin, enable a JSON suit for a particular field:\n\n\nfrom jsonsuit.widgets import JSONSuit\n\nclass JSONForm(forms.ModelForm):\n  class Meta:\n    model = Test\n    fields = '__all__'\n    widgets = {\n      'myjsonfield': JSONSuit(),\n    }\n\nclass JSONAdmin(admin.ModelAdmin):\n  form = JSONForm\n\n\n\n\nEnable JSON suit for every JSONField of a model:\n\n\nfrom django.contrib.postgres.fields import JSONField\n\nclass JSONAdmin(admin.ModelAdmin):\n  formfield_overrides = {\n    JSONField: {'widget': JSONSuit }\n  }\n\n\n\n\nReadonlyJSONSuit\n\n\nIn a form or model admin, enable a readonly JSON suit for a particular field:\n\n\nfrom jsonsuit.widgets import ReadonlyJSONSuit\n\nclass ReadonlyJSONForm(forms.ModelForm):\n  class Meta:\n    model = Test\n    fields = '__all__'\n    widgets = {\n      'myjsonfield': ReadonlyJSONSuit(),\n    }\n\nclass ReadonlyJSONAdmin(admin.ModelAdmin):\n  form = ReadonlyJSONForm\n\n\n\n\nEnable readonly JSON suit for every JSONField of a model:\n\n\nfrom django.contrib.postgres.fields import JSONField\n\nclass ReadonlyJSONAdmin(admin.ModelAdmin):\n  formfield_overrides = {\n    JSONField: {'widget': ReadonlyJSONSuit }\n  }\n\n\n\n\nTemplate Tags\n\n\nUse the jsonsuit template tag to display serializable objects in templates. Note that in order to use the \njsonsuit\n, \njsonsuit_css\n and \njsonsuit_js\n tags, they must be loaded using \n{% load jsonsuit %}\n. \n\n\n{% extends \"ui/base.html\" %}\n{% load jsonsuit %}\n\n{% block title %}{% trans \"JSONSuit Template Tag\" %}{% endblock %}\n\n{% block styles %}\n    {{ block.super }}\n    {% jsonsuit_css %} <!-- include jsonsuit CSS files -->\n{% endblock %}\n\n{% block content %}\n<div class=\"row\">\n  <div class=\"col-md-4\">\n      <h2>Unnamed Suit</h2>\n      {% jsonsuit data %} <!-- with no parameter supplied,\n                               a uuid is generated as\n                               HTML attribute value to\n                               identify each individual suit:\n                               data-jsonsuit=\"<uuid>\" -->\n  </div>\n  <div class=\"col-md-8\">\n      <h2>Named Suit</h2>\n      {% jsonsuit data 'suit_name' %} <!-- for each suit,\n                                           an optional string\n                                           can be supplied, which\n                                           serves as HTML attribute\n                                           value: data-jsonsuit=\"<suit_name>\" -->\n  </div>\n</div>\n{% endblock %}\n\n{% block scripts %}\n    {{ block.super }}\n    {% jsonsuit_js %} <!-- include jsonsuit JS files -->\n{% endblock %}\n\n\n\n\nTheme\n\n\nSet JSON syntax highlighter theme in settings:\n\n\nJSONSUIT_WIDGET_THEME = 'twilight'\n\n\n\n\nAvailable themes: \ncoy\n, \ndark\n, \ndefault\n, \nfunky\n, \nokaidia\n, \nsolarizedlight\n, \ntwilight\n. Defaults to the \ndefault\n theme.\n\n\nCustom Widget Media\n\n\nSet custom widget media (JS & CSS) files:\n\n\nJSONSUIT_WIDGET_MEDIA_JS = (\n    'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myscripts.js'\n)\n\nJSONSUIT_WIDGET_MEDIA_CSS = {\n    'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/mystyles.css')\n}\n\nJSONSUIT_READONLY_WIDGET_MEDIA_JS = (\n    'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myreadonlyscripts.js'\n)\n\nJSONSUIT_READONLY_WIDGET_MEDIA_CSS = {\n    'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/myreadonlystyles.css')\n}\n\n\n\n\nTo only replace the syntax highlighter assets for all widgets, simply change:\n\n\nJSONSUIT_SYNTAX_HIGHLIGHTER_JS = ('jsonsuit/js/mysyntaxhighlighter.js',)\nJSONSUIT_SYNTAX_HIGHLIGHTER_CSS = ('jsonsuit/css/mytheme.css',)\n\n\n\n\nCustom HTML template\n\n\nOverride \njsonsuit/widget.html\n or \njsonsuit/readonly_widget.html\n template:\n\n\njsonsuit/templates\n\u2514\u2500\u2500 jsonsuit\n    \u2514\u2500\u2500 widget.html\n    \u2514\u2500\u2500 readonly_widget.html\n\n\n\n\nRunning Tests\n\n\nDoes the code actually work?\n\n\nsource <YOURVIRTUALENV>/bin/activate\n(myenv) $ pip install tox\n(myenv) $ tox",
            "title": "Home"
        },
        {
            "location": "/#django-jsonsuit",
            "text": "Django goodies to dress JSON data in a suit.",
            "title": "django-jsonsuit"
        },
        {
            "location": "/#features",
            "text": "Editable and readonly widget  Change JSON syntax highlighter themes  Set custom widget media (JS & CSS) files  Use custom HTML templates",
            "title": "Features"
        },
        {
            "location": "/#quickstart",
            "text": "Install django-jsonsuit:  pip install django-jsonsuit  Add it to your  INSTALLED_APPS :  INSTALLED_APPS = (\n    ...\n    'jsonsuit.apps.JSONSuitConfig',\n    ...\n)",
            "title": "Quickstart"
        },
        {
            "location": "/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/#widgets",
            "text": "django-jsonsuit currently provides two widgets to dress your JSON data:   JSONSuit : Widget that displays JSON data with indentation and syntax highlighting as default, but allows to toggle between the standard django  Textarea  for editing.  ReadonlyJSONSuit : Widget that simply displays JSON data with indentation and syntax highlighting. It is useful for JSON fields that contain readonly data.   Note : Because a widget in django is only responsible for displaying fields, it has no direct access to its field properties. Thus there is no easy way to check if the field is readonly. The readonly behaviour is even handled differently among django forms, model forms and admin. This is why the  ReadonlyJSONSuit  was introduced.",
            "title": "Widgets"
        },
        {
            "location": "/#jsonsuit",
            "text": "In a form or model admin, enable a JSON suit for a particular field:  from jsonsuit.widgets import JSONSuit\n\nclass JSONForm(forms.ModelForm):\n  class Meta:\n    model = Test\n    fields = '__all__'\n    widgets = {\n      'myjsonfield': JSONSuit(),\n    }\n\nclass JSONAdmin(admin.ModelAdmin):\n  form = JSONForm  Enable JSON suit for every JSONField of a model:  from django.contrib.postgres.fields import JSONField\n\nclass JSONAdmin(admin.ModelAdmin):\n  formfield_overrides = {\n    JSONField: {'widget': JSONSuit }\n  }",
            "title": "JSONSuit"
        },
        {
            "location": "/#readonlyjsonsuit",
            "text": "In a form or model admin, enable a readonly JSON suit for a particular field:  from jsonsuit.widgets import ReadonlyJSONSuit\n\nclass ReadonlyJSONForm(forms.ModelForm):\n  class Meta:\n    model = Test\n    fields = '__all__'\n    widgets = {\n      'myjsonfield': ReadonlyJSONSuit(),\n    }\n\nclass ReadonlyJSONAdmin(admin.ModelAdmin):\n  form = ReadonlyJSONForm  Enable readonly JSON suit for every JSONField of a model:  from django.contrib.postgres.fields import JSONField\n\nclass ReadonlyJSONAdmin(admin.ModelAdmin):\n  formfield_overrides = {\n    JSONField: {'widget': ReadonlyJSONSuit }\n  }",
            "title": "ReadonlyJSONSuit"
        },
        {
            "location": "/#template-tags",
            "text": "Use the jsonsuit template tag to display serializable objects in templates. Note that in order to use the  jsonsuit ,  jsonsuit_css  and  jsonsuit_js  tags, they must be loaded using  {% load jsonsuit %} .   {% extends \"ui/base.html\" %}\n{% load jsonsuit %}\n\n{% block title %}{% trans \"JSONSuit Template Tag\" %}{% endblock %}\n\n{% block styles %}\n    {{ block.super }}\n    {% jsonsuit_css %} <!-- include jsonsuit CSS files -->\n{% endblock %}\n\n{% block content %}\n<div class=\"row\">\n  <div class=\"col-md-4\">\n      <h2>Unnamed Suit</h2>\n      {% jsonsuit data %} <!-- with no parameter supplied,\n                               a uuid is generated as\n                               HTML attribute value to\n                               identify each individual suit:\n                               data-jsonsuit=\"<uuid>\" -->\n  </div>\n  <div class=\"col-md-8\">\n      <h2>Named Suit</h2>\n      {% jsonsuit data 'suit_name' %} <!-- for each suit,\n                                           an optional string\n                                           can be supplied, which\n                                           serves as HTML attribute\n                                           value: data-jsonsuit=\"<suit_name>\" -->\n  </div>\n</div>\n{% endblock %}\n\n{% block scripts %}\n    {{ block.super }}\n    {% jsonsuit_js %} <!-- include jsonsuit JS files -->\n{% endblock %}",
            "title": "Template Tags"
        },
        {
            "location": "/#theme",
            "text": "Set JSON syntax highlighter theme in settings:  JSONSUIT_WIDGET_THEME = 'twilight'  Available themes:  coy ,  dark ,  default ,  funky ,  okaidia ,  solarizedlight ,  twilight . Defaults to the  default  theme.",
            "title": "Theme"
        },
        {
            "location": "/#custom-widget-media",
            "text": "Set custom widget media (JS & CSS) files:  JSONSUIT_WIDGET_MEDIA_JS = (\n    'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myscripts.js'\n)\n\nJSONSUIT_WIDGET_MEDIA_CSS = {\n    'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/mystyles.css')\n}\n\nJSONSUIT_READONLY_WIDGET_MEDIA_JS = (\n    'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myreadonlyscripts.js'\n)\n\nJSONSUIT_READONLY_WIDGET_MEDIA_CSS = {\n    'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/myreadonlystyles.css')\n}  To only replace the syntax highlighter assets for all widgets, simply change:  JSONSUIT_SYNTAX_HIGHLIGHTER_JS = ('jsonsuit/js/mysyntaxhighlighter.js',)\nJSONSUIT_SYNTAX_HIGHLIGHTER_CSS = ('jsonsuit/css/mytheme.css',)",
            "title": "Custom Widget Media"
        },
        {
            "location": "/#custom-html-template",
            "text": "Override  jsonsuit/widget.html  or  jsonsuit/readonly_widget.html  template:  jsonsuit/templates\n\u2514\u2500\u2500 jsonsuit\n    \u2514\u2500\u2500 widget.html\n    \u2514\u2500\u2500 readonly_widget.html",
            "title": "Custom HTML template"
        },
        {
            "location": "/#running-tests",
            "text": "Does the code actually work?  source <YOURVIRTUALENV>/bin/activate\n(myenv) $ pip install tox\n(myenv) $ tox",
            "title": "Running Tests"
        },
        {
            "location": "/releases/",
            "text": "Release Notes\n\n\nHistory\n\n\nVersion 0.4.4 (2018-01-31)\n\n\n\n\nUpdate django doc links\n\n\nRemove unused load of i18n template tag\n\n\nUpdate prism assets\n\n\n\n\nVersion 0.4.3 (2018-01-19)\n\n\n\n\nFix toggling of JSON field instead of submitting\n\n\nFix test for jsonsuit template tag\n\n\nUpdate test requirements\n\n\nAdd renderer kwarg to the widget render fn\n\n\nFix tox and travis config\n\n\n\n\nVersion 0.4.2 (2017-07-03)\n\n\n\n\nFix test for jsonsuit template tag\n\n\nFix jsonsuit template tag for empty strings and add test case\n\n\n\n\nVersion 0.4.1 (2017-06-19)\n\n\n\n\nSimplify tests to work with multiple python versions\n\n\nFix docs about template tags\n\n\n\n\nVersion 0.4.0 (2017-06-18)\n\n\n\n\nAdd jsonsuit template tags\n\n\n\n\nVersion 0.3.0 (2017-06-02)\n\n\n\n\nAdd ReadonlyJSONSuit widget\n\n\nMake app settings more modular\n\n\nMake JS code more generic (mostly using classes in selectors)\n\n\nUse Prism's \"default\" theme as default\n\n\n\n\nVersion 0.2.0 (2017-05-14)\n\n\n\n\nChange JSON syntax highlighter themes\n\n\nSet custom widget media (JS & CSS) files\n\n\nUse custom HTML template\n\n\n\n\nVersion 0.1.0 (2017-05-13)\n\n\n\n\nFirst release on PyPI.",
            "title": "Release Notes"
        },
        {
            "location": "/releases/#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/releases/#history",
            "text": "",
            "title": "History"
        },
        {
            "location": "/releases/#version-044-2018-01-31",
            "text": "Update django doc links  Remove unused load of i18n template tag  Update prism assets",
            "title": "Version 0.4.4 (2018-01-31)"
        },
        {
            "location": "/releases/#version-043-2018-01-19",
            "text": "Fix toggling of JSON field instead of submitting  Fix test for jsonsuit template tag  Update test requirements  Add renderer kwarg to the widget render fn  Fix tox and travis config",
            "title": "Version 0.4.3 (2018-01-19)"
        },
        {
            "location": "/releases/#version-042-2017-07-03",
            "text": "Fix test for jsonsuit template tag  Fix jsonsuit template tag for empty strings and add test case",
            "title": "Version 0.4.2 (2017-07-03)"
        },
        {
            "location": "/releases/#version-041-2017-06-19",
            "text": "Simplify tests to work with multiple python versions  Fix docs about template tags",
            "title": "Version 0.4.1 (2017-06-19)"
        },
        {
            "location": "/releases/#version-040-2017-06-18",
            "text": "Add jsonsuit template tags",
            "title": "Version 0.4.0 (2017-06-18)"
        },
        {
            "location": "/releases/#version-030-2017-06-02",
            "text": "Add ReadonlyJSONSuit widget  Make app settings more modular  Make JS code more generic (mostly using classes in selectors)  Use Prism's \"default\" theme as default",
            "title": "Version 0.3.0 (2017-06-02)"
        },
        {
            "location": "/releases/#version-020-2017-05-14",
            "text": "Change JSON syntax highlighter themes  Set custom widget media (JS & CSS) files  Use custom HTML template",
            "title": "Version 0.2.0 (2017-05-14)"
        },
        {
            "location": "/releases/#version-010-2017-05-13",
            "text": "First release on PyPI.",
            "title": "Version 0.1.0 (2017-05-13)"
        },
        {
            "location": "/contributing/",
            "text": "Contributing\n\n\nContributions are welcome, and they are greatly appreciated! Every\nlittle bit helps, and credit will always be given.\n\n\nYou can contribute in many ways:\n\n\nTypes of Contributions\n\n\nReport Bugs\n\n\nReport bugs at \nhttps://github.com/tooreht/django-jsonsuit/issues\n.\n\n\nIf you are reporting a bug, please include:\n\n\n\n\nYour operating system name and version.\n\n\nAny details about your local setup that might be helpful in\n    troubleshooting.\n\n\nDetailed steps to reproduce the bug.\n\n\n\n\nFix Bugs\n\n\nLook through the GitHub issues for bugs. Anything tagged with \"bug\" is\nopen to whoever wants to implement it.\n\n\nImplement Features\n\n\nLook through the GitHub issues for features. Anything tagged with\n\"feature\" is open to whoever wants to implement it.\n\n\nWrite Documentation\n\n\ndjango-jsonsuit could always use more documentation, whether as part of\nthe official django-jsonsuit docs, in docstrings, or even on the web in\nblog posts, articles, and such.\n\n\nSubmit Feedback\n\n\nThe best way to send feedback is to file an issue at\n\nhttps://github.com/tooreht/django-jsonsuit/issues\n.\n\n\nIf you are proposing a feature:\n\n\n\n\nExplain in detail how it would work.\n\n\nKeep the scope as narrow as possible, to make it easier to\n    implement.\n\n\nRemember that this is a volunteer-driven project, and that\n    contributions are welcome :)\n\n\n\n\nGet Started!\n\n\nReady to contribute? Here's how to set up django-jsonsuit for local\ndevelopment.\n\n\n\n\nFork the django-jsonsuit repo on GitHub.\n\n\n\n\nClone your fork locally:\n\n\n$ git clone git@github.com:your_name_here/django-jsonsuit.git\n\n\n\n\n\n\n\nInstall your local copy into a virtualenv. Assuming you have\n    virtualenvwrapper installed, this is how you set up your fork for\n    local development:\n\n\n$ mkvirtualenv django-jsonsuit\n$ cd django-jsonsuit/\n$ python setup.py develop\n\n\n\n\n\n\n\nCreate a branch for local development:\n\n\n$ git checkout -b name-of-your-bugfix-or-feature\n\n\n\nNow you can make your changes locally.\n\n\n\n\n\n\nWhen you're done making changes, check that your changes pass flake8\n    and the tests, including testing other Python versions with tox:\n\n\n$ flake8 jsonsuit tests\n$ python setup.py test\n$ tox\n\n\n\nTo get flake8 and tox, just pip install them into your virtualenv.\n\n\n\n\n\n\nCommit your changes and push your branch to GitHub:\n\n\n$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n\n\n\n\n\n\n\nSubmit a pull request through the GitHub website.\n\n\n\n\n\n\nPull Request Guidelines\n\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n\n\n\nThe pull request should include tests.\n\n\nIf the pull request adds functionality, the docs should be updated.\n    Put your new functionality into a function with a docstring, and add\n    the feature to the list in README.md.\n\n\nThe pull request should work for Python 2.6, 2.7, and 3.3, and for\n    PyPy. Check\n    \nhttps://travis-ci.org/tooreht/django-jsonsuit/pull_requests\n and\n    make sure that the tests pass for all supported Python versions.\n\n\n\n\nTips\n\n\nTo run a subset of tests:\n\n\n$ python -m unittest tests.test_jsonsuit\n\n\n\nMake a minor version bump:\n\n\n$ bumpversion minor",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#contributing",
            "text": "Contributions are welcome, and they are greatly appreciated! Every\nlittle bit helps, and credit will always be given.  You can contribute in many ways:",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#types-of-contributions",
            "text": "",
            "title": "Types of Contributions"
        },
        {
            "location": "/contributing/#report-bugs",
            "text": "Report bugs at  https://github.com/tooreht/django-jsonsuit/issues .  If you are reporting a bug, please include:   Your operating system name and version.  Any details about your local setup that might be helpful in\n    troubleshooting.  Detailed steps to reproduce the bug.",
            "title": "Report Bugs"
        },
        {
            "location": "/contributing/#fix-bugs",
            "text": "Look through the GitHub issues for bugs. Anything tagged with \"bug\" is\nopen to whoever wants to implement it.",
            "title": "Fix Bugs"
        },
        {
            "location": "/contributing/#implement-features",
            "text": "Look through the GitHub issues for features. Anything tagged with\n\"feature\" is open to whoever wants to implement it.",
            "title": "Implement Features"
        },
        {
            "location": "/contributing/#write-documentation",
            "text": "django-jsonsuit could always use more documentation, whether as part of\nthe official django-jsonsuit docs, in docstrings, or even on the web in\nblog posts, articles, and such.",
            "title": "Write Documentation"
        },
        {
            "location": "/contributing/#submit-feedback",
            "text": "The best way to send feedback is to file an issue at https://github.com/tooreht/django-jsonsuit/issues .  If you are proposing a feature:   Explain in detail how it would work.  Keep the scope as narrow as possible, to make it easier to\n    implement.  Remember that this is a volunteer-driven project, and that\n    contributions are welcome :)",
            "title": "Submit Feedback"
        },
        {
            "location": "/contributing/#get-started",
            "text": "Ready to contribute? Here's how to set up django-jsonsuit for local\ndevelopment.   Fork the django-jsonsuit repo on GitHub.   Clone your fork locally:  $ git clone git@github.com:your_name_here/django-jsonsuit.git    Install your local copy into a virtualenv. Assuming you have\n    virtualenvwrapper installed, this is how you set up your fork for\n    local development:  $ mkvirtualenv django-jsonsuit\n$ cd django-jsonsuit/\n$ python setup.py develop    Create a branch for local development:  $ git checkout -b name-of-your-bugfix-or-feature  Now you can make your changes locally.    When you're done making changes, check that your changes pass flake8\n    and the tests, including testing other Python versions with tox:  $ flake8 jsonsuit tests\n$ python setup.py test\n$ tox  To get flake8 and tox, just pip install them into your virtualenv.    Commit your changes and push your branch to GitHub:  $ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature    Submit a pull request through the GitHub website.",
            "title": "Get Started!"
        },
        {
            "location": "/contributing/#pull-request-guidelines",
            "text": "Before you submit a pull request, check that it meets these guidelines:   The pull request should include tests.  If the pull request adds functionality, the docs should be updated.\n    Put your new functionality into a function with a docstring, and add\n    the feature to the list in README.md.  The pull request should work for Python 2.6, 2.7, and 3.3, and for\n    PyPy. Check\n     https://travis-ci.org/tooreht/django-jsonsuit/pull_requests  and\n    make sure that the tests pass for all supported Python versions.",
            "title": "Pull Request Guidelines"
        },
        {
            "location": "/contributing/#tips",
            "text": "To run a subset of tests:  $ python -m unittest tests.test_jsonsuit  Make a minor version bump:  $ bumpversion minor",
            "title": "Tips"
        },
        {
            "location": "/credits/",
            "text": "Credits\n\n\nIncluded Projects\n\n\nProject dependencies:\n\n\n\n\nprism\n\n\nvanilla-js\n\n\n\n\nProject documentation:\n\n\n\n\nMkDocs\n\n\n\n\nTools used in rendering this package:\n\n\n\n\nCookiecutter\n\n\ncookiecutter-djangopackage\n\n\n\n\nAuthors\n\n\nDevelopment Lead\n\n\n\n\nMarc Zimmermann \ntooreht@gmail.com\n\n\n\n\nContributors\n\n\nNone yet. Why not be the first?",
            "title": "Credits"
        },
        {
            "location": "/credits/#credits",
            "text": "",
            "title": "Credits"
        },
        {
            "location": "/credits/#included-projects",
            "text": "Project dependencies:   prism  vanilla-js   Project documentation:   MkDocs   Tools used in rendering this package:   Cookiecutter  cookiecutter-djangopackage",
            "title": "Included Projects"
        },
        {
            "location": "/credits/#authors",
            "text": "",
            "title": "Authors"
        },
        {
            "location": "/credits/#development-lead",
            "text": "Marc Zimmermann  tooreht@gmail.com",
            "title": "Development Lead"
        },
        {
            "location": "/credits/#contributors",
            "text": "None yet. Why not be the first?",
            "title": "Contributors"
        },
        {
            "location": "/license/",
            "text": "License\n\n\nMIT License\n\n\nCopyright (c) 2017, Marc Zimmermann\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "MIT License  Copyright (c) 2017, Marc Zimmermann  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        }
    ]
}