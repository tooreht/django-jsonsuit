{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"django-jsonsuit Django goodies to dress JSON data in a suit. Documentation The full documentation is at https://tooreht.github.io/django-jsonsuit . An example project can be found at https://github.com/tooreht/django-jsonsuit-example . Features Editable and readonly widget Change JSON syntax highlighter themes Set custom widget media (JS & CSS) files Use custom HTML templates Quickstart Install django-jsonsuit: pip install django-jsonsuit Add it to your INSTALLED_APPS : INSTALLED_APPS = ( ... 'jsonsuit.apps.JSONSuitConfig', ... ) Usage Widgets django-jsonsuit currently provides two widgets to dress your JSON data: JSONSuit : Widget that displays JSON data with indentation and syntax highlighting as default, but allows to toggle between the standard django Textarea for editing. ReadonlyJSONSuit : Widget that simply displays JSON data with indentation and syntax highlighting. It is useful for JSON fields that contain readonly data. Note : Because a widget in django is only responsible for displaying fields, it has no direct access to its field properties. Thus there is no easy way to check if the field is readonly. The readonly behaviour is even handled differently among django forms, model forms and admin. This is why the ReadonlyJSONSuit was introduced. Note : When using multiple form instances or multiple forms with equal field names on the same page use Formsets or prefixes to avoid HTML element id clashes. JSONSuit In a form or model admin, enable a JSON suit for a particular field: from jsonsuit.widgets import JSONSuit class JSONForm(forms.ModelForm): class Meta: model = Test fields = '__all__' widgets = { 'myjsonfield': JSONSuit(), } class JSONAdmin(admin.ModelAdmin): form = JSONForm Enable JSON suit for every JSONField of a model: from django.db import models class JSONAdmin(admin.ModelAdmin): formfield_overrides = { models.JSONField: {'widget': JSONSuit } } ReadonlyJSONSuit In a form or model admin, enable a readonly JSON suit for a particular field: from jsonsuit.widgets import ReadonlyJSONSuit class ReadonlyJSONForm(forms.ModelForm): class Meta: model = Test fields = '__all__' widgets = { 'myjsonfield': ReadonlyJSONSuit(), } class ReadonlyJSONAdmin(admin.ModelAdmin): form = ReadonlyJSONForm Enable readonly JSON suit for every JSONField of a model: from django.db import models class ReadonlyJSONAdmin(admin.ModelAdmin): formfield_overrides = { models.JSONField: {'widget': ReadonlyJSONSuit } } Template Tags Use the jsonsuit template tag to display serializable objects in templates. Note that in order to use the jsonsuit , jsonsuit_css and jsonsuit_js tags, they must be loaded using {% load jsonsuit %} . {% extends \"ui/base.html\" %} {% load jsonsuit %} {% block title %}{% trans \"JSONSuit Template Tag\" %}{% endblock %} {% block styles %} {{ block.super }} {% jsonsuit_css %} <!-- include jsonsuit CSS files --> {% endblock %} {% block content %} <div class=\"row\"> <div class=\"col-md-4\"> <h2>Unnamed Suit</h2> {% jsonsuit data %} <!-- with no parameter supplied, a uuid is generated as HTML attribute value to identify each individual suit: data-jsonsuit=\"<uuid>\" --> </div> <div class=\"col-md-8\"> <h2>Named Suit</h2> {% jsonsuit data 'suit_name' %} <!-- for each suit, an optional string can be supplied, which serves as HTML attribute value: data-jsonsuit=\"<suit_name>\" --> </div> </div> {% endblock %} {% block scripts %} {{ block.super }} {% jsonsuit_js %} <!-- include jsonsuit JS files --> {% endblock %} Theme Set JSON syntax highlighter theme in settings: JSONSUIT_WIDGET_THEME = 'twilight' Available themes: coy , dark , default , funky , okaidia , solarizedlight , twilight , tomorrow . Defaults to the default theme. Custom Widget Media Set custom widget media (JS & CSS) files: JSONSUIT_WIDGET_MEDIA_JS = ( 'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myscripts.js' ) JSONSUIT_WIDGET_MEDIA_CSS = { 'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/mystyles.css') } JSONSUIT_READONLY_WIDGET_MEDIA_JS = ( 'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myreadonlyscripts.js' ) JSONSUIT_READONLY_WIDGET_MEDIA_CSS = { 'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/myreadonlystyles.css') } To only replace the syntax highlighter assets for all widgets, simply change: JSONSUIT_SYNTAX_HIGHLIGHTER_JS = ('jsonsuit/js/mysyntaxhighlighter.js',) JSONSUIT_SYNTAX_HIGHLIGHTER_CSS = ('jsonsuit/css/mytheme.css',) Custom HTML template Override jsonsuit/widget.html or jsonsuit/readonly_widget.html template: jsonsuit/templates \u2514\u2500\u2500 jsonsuit \u2514\u2500\u2500 widget.html \u2514\u2500\u2500 readonly_widget.html Running Tests Does the code actually work? source <YOURVIRTUALENV>/bin/activate (myenv) $ pip install tox (myenv) $ tox","title":"Home"},{"location":"#django-jsonsuit","text":"Django goodies to dress JSON data in a suit.","title":"django-jsonsuit"},{"location":"#documentation","text":"The full documentation is at https://tooreht.github.io/django-jsonsuit . An example project can be found at https://github.com/tooreht/django-jsonsuit-example .","title":"Documentation"},{"location":"#features","text":"Editable and readonly widget Change JSON syntax highlighter themes Set custom widget media (JS & CSS) files Use custom HTML templates","title":"Features"},{"location":"#quickstart","text":"Install django-jsonsuit: pip install django-jsonsuit Add it to your INSTALLED_APPS : INSTALLED_APPS = ( ... 'jsonsuit.apps.JSONSuitConfig', ... )","title":"Quickstart"},{"location":"#usage","text":"","title":"Usage"},{"location":"#widgets","text":"django-jsonsuit currently provides two widgets to dress your JSON data: JSONSuit : Widget that displays JSON data with indentation and syntax highlighting as default, but allows to toggle between the standard django Textarea for editing. ReadonlyJSONSuit : Widget that simply displays JSON data with indentation and syntax highlighting. It is useful for JSON fields that contain readonly data. Note : Because a widget in django is only responsible for displaying fields, it has no direct access to its field properties. Thus there is no easy way to check if the field is readonly. The readonly behaviour is even handled differently among django forms, model forms and admin. This is why the ReadonlyJSONSuit was introduced. Note : When using multiple form instances or multiple forms with equal field names on the same page use Formsets or prefixes to avoid HTML element id clashes.","title":"Widgets"},{"location":"#jsonsuit","text":"In a form or model admin, enable a JSON suit for a particular field: from jsonsuit.widgets import JSONSuit class JSONForm(forms.ModelForm): class Meta: model = Test fields = '__all__' widgets = { 'myjsonfield': JSONSuit(), } class JSONAdmin(admin.ModelAdmin): form = JSONForm Enable JSON suit for every JSONField of a model: from django.db import models class JSONAdmin(admin.ModelAdmin): formfield_overrides = { models.JSONField: {'widget': JSONSuit } }","title":"JSONSuit"},{"location":"#readonlyjsonsuit","text":"In a form or model admin, enable a readonly JSON suit for a particular field: from jsonsuit.widgets import ReadonlyJSONSuit class ReadonlyJSONForm(forms.ModelForm): class Meta: model = Test fields = '__all__' widgets = { 'myjsonfield': ReadonlyJSONSuit(), } class ReadonlyJSONAdmin(admin.ModelAdmin): form = ReadonlyJSONForm Enable readonly JSON suit for every JSONField of a model: from django.db import models class ReadonlyJSONAdmin(admin.ModelAdmin): formfield_overrides = { models.JSONField: {'widget': ReadonlyJSONSuit } }","title":"ReadonlyJSONSuit"},{"location":"#template-tags","text":"Use the jsonsuit template tag to display serializable objects in templates. Note that in order to use the jsonsuit , jsonsuit_css and jsonsuit_js tags, they must be loaded using {% load jsonsuit %} . {% extends \"ui/base.html\" %} {% load jsonsuit %} {% block title %}{% trans \"JSONSuit Template Tag\" %}{% endblock %} {% block styles %} {{ block.super }} {% jsonsuit_css %} <!-- include jsonsuit CSS files --> {% endblock %} {% block content %} <div class=\"row\"> <div class=\"col-md-4\"> <h2>Unnamed Suit</h2> {% jsonsuit data %} <!-- with no parameter supplied, a uuid is generated as HTML attribute value to identify each individual suit: data-jsonsuit=\"<uuid>\" --> </div> <div class=\"col-md-8\"> <h2>Named Suit</h2> {% jsonsuit data 'suit_name' %} <!-- for each suit, an optional string can be supplied, which serves as HTML attribute value: data-jsonsuit=\"<suit_name>\" --> </div> </div> {% endblock %} {% block scripts %} {{ block.super }} {% jsonsuit_js %} <!-- include jsonsuit JS files --> {% endblock %}","title":"Template Tags"},{"location":"#theme","text":"Set JSON syntax highlighter theme in settings: JSONSUIT_WIDGET_THEME = 'twilight' Available themes: coy , dark , default , funky , okaidia , solarizedlight , twilight , tomorrow . Defaults to the default theme.","title":"Theme"},{"location":"#custom-widget-media","text":"Set custom widget media (JS & CSS) files: JSONSUIT_WIDGET_MEDIA_JS = ( 'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myscripts.js' ) JSONSUIT_WIDGET_MEDIA_CSS = { 'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/mystyles.css') } JSONSUIT_READONLY_WIDGET_MEDIA_JS = ( 'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myreadonlyscripts.js' ) JSONSUIT_READONLY_WIDGET_MEDIA_CSS = { 'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/myreadonlystyles.css') } To only replace the syntax highlighter assets for all widgets, simply change: JSONSUIT_SYNTAX_HIGHLIGHTER_JS = ('jsonsuit/js/mysyntaxhighlighter.js',) JSONSUIT_SYNTAX_HIGHLIGHTER_CSS = ('jsonsuit/css/mytheme.css',)","title":"Custom Widget Media"},{"location":"#custom-html-template","text":"Override jsonsuit/widget.html or jsonsuit/readonly_widget.html template: jsonsuit/templates \u2514\u2500\u2500 jsonsuit \u2514\u2500\u2500 widget.html \u2514\u2500\u2500 readonly_widget.html","title":"Custom HTML template"},{"location":"#running-tests","text":"Does the code actually work? source <YOURVIRTUALENV>/bin/activate (myenv) $ pip install tox (myenv) $ tox","title":"Running Tests"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/tooreht/django-jsonsuit/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it. Write Documentation django-jsonsuit could always use more documentation, whether as part of the official django-jsonsuit docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/tooreht/django-jsonsuit/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up django-jsonsuit for local development. Fork the django-jsonsuit repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/django-jsonsuit.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: $ mkvirtualenv django-jsonsuit $ cd django-jsonsuit/ $ python setup.py develop Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: $ flake8 jsonsuit tests $ python setup.py test $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.9, 3.10, 3.11 and for PyPy. Check https://github.com/tooreht/django-jsonsuit/actions and make sure that the tests pass for all supported Python versions. Tips To run a subset of tests: $ python -m unittest tests.test_jsonsuit","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/tooreht/django-jsonsuit/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"django-jsonsuit could always use more documentation, whether as part of the official django-jsonsuit docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/tooreht/django-jsonsuit/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up django-jsonsuit for local development. Fork the django-jsonsuit repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/django-jsonsuit.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: $ mkvirtualenv django-jsonsuit $ cd django-jsonsuit/ $ python setup.py develop Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: $ flake8 jsonsuit tests $ python setup.py test $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.9, 3.10, 3.11 and for PyPy. Check https://github.com/tooreht/django-jsonsuit/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests: $ python -m unittest tests.test_jsonsuit","title":"Tips"},{"location":"credits/","text":"Credits Included Projects Project dependencies: prism vanilla-js Project documentation: MkDocs Tools used in rendering this package: Cookiecutter cookiecutter-djangopackage Authors Development Lead Marc Zimmermann tooreht@gmail.com Contributors None yet. Why not be the first?","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"credits/#included-projects","text":"Project dependencies: prism vanilla-js Project documentation: MkDocs Tools used in rendering this package: Cookiecutter cookiecutter-djangopackage","title":"Included Projects"},{"location":"credits/#authors","text":"","title":"Authors"},{"location":"credits/#development-lead","text":"Marc Zimmermann tooreht@gmail.com","title":"Development Lead"},{"location":"credits/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"license/","text":"License MIT License Copyright (c) 2021, Marc Zimmermann Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2021, Marc Zimmermann Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"releases/","text":"Release Notes History 0.5.1 (unreleased) Nothing changed yet. Version 0.5.0 (2023-01-20) Modernize tooling Support python 3.9, 3.10, 3.11 Support django 3.2, 4.1 Update PrismJS to version 1.29.0 Simplify DOM ready for modern browsers Update jsonsuit on toggle Support for multiple mixed forms Version 0.4.4 (2018-01-31) Update django doc links Remove unused load of i18n template tag Update prism assets Version 0.4.3 (2018-01-19) Fix toggling of JSON field instead of submitting Fix test for jsonsuit template tag Update test requirements Add renderer kwarg to the widget render fn Fix tox and travis config Version 0.4.2 (2017-07-03) Fix test for jsonsuit template tag Fix jsonsuit template tag for empty strings and add test case Version 0.4.1 (2017-06-19) Simplify tests to work with multiple python versions Fix docs about template tags Version 0.4.0 (2017-06-18) Add jsonsuit template tags Version 0.3.0 (2017-06-02) Add ReadonlyJSONSuit widget Make app settings more modular Make JS code more generic (mostly using classes in selectors) Use Prism's \"default\" theme as default Version 0.2.0 (2017-05-14) Change JSON syntax highlighter themes Set custom widget media (JS & CSS) files Use custom HTML template Version 0.1.0 (2017-05-13) First release on PyPI.","title":"Release Notes"},{"location":"releases/#release-notes","text":"","title":"Release Notes"},{"location":"releases/#history","text":"","title":"History"},{"location":"releases/#051-unreleased","text":"Nothing changed yet.","title":"0.5.1 (unreleased)"},{"location":"releases/#version-050-2023-01-20","text":"Modernize tooling Support python 3.9, 3.10, 3.11 Support django 3.2, 4.1 Update PrismJS to version 1.29.0 Simplify DOM ready for modern browsers Update jsonsuit on toggle Support for multiple mixed forms","title":"Version 0.5.0 (2023-01-20)"},{"location":"releases/#version-044-2018-01-31","text":"Update django doc links Remove unused load of i18n template tag Update prism assets","title":"Version 0.4.4 (2018-01-31)"},{"location":"releases/#version-043-2018-01-19","text":"Fix toggling of JSON field instead of submitting Fix test for jsonsuit template tag Update test requirements Add renderer kwarg to the widget render fn Fix tox and travis config","title":"Version 0.4.3 (2018-01-19)"},{"location":"releases/#version-042-2017-07-03","text":"Fix test for jsonsuit template tag Fix jsonsuit template tag for empty strings and add test case","title":"Version 0.4.2 (2017-07-03)"},{"location":"releases/#version-041-2017-06-19","text":"Simplify tests to work with multiple python versions Fix docs about template tags","title":"Version 0.4.1 (2017-06-19)"},{"location":"releases/#version-040-2017-06-18","text":"Add jsonsuit template tags","title":"Version 0.4.0 (2017-06-18)"},{"location":"releases/#version-030-2017-06-02","text":"Add ReadonlyJSONSuit widget Make app settings more modular Make JS code more generic (mostly using classes in selectors) Use Prism's \"default\" theme as default","title":"Version 0.3.0 (2017-06-02)"},{"location":"releases/#version-020-2017-05-14","text":"Change JSON syntax highlighter themes Set custom widget media (JS & CSS) files Use custom HTML template","title":"Version 0.2.0 (2017-05-14)"},{"location":"releases/#version-010-2017-05-13","text":"First release on PyPI.","title":"Version 0.1.0 (2017-05-13)"}]}